;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: PTTPP; Base: 10; common-lisp-style: poem -*-

;;; Copyright (c) 1986 Mark E. Stickel, SRI International, Menlo Park, CA 94025 USA
;;; Copyright (c) 2012 Matthias HÃ¶lzl
;;; 
;;; This file is licensed under the MIT license; see the file LICENSE
;;; in the root directory for further information.

(in-package #:pttpp)
(declaim (optimize (debug 3)))

#+5AM
(define-integration-test chang&lee-test-1
  (program '(u v w x y z)
           '((p (g x y) x y) (p x (h x y) y)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p (k x) x (k x))) !)))
           :incomplete-inference t)
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (variable-value var-3))
         (var-5 (variable-value var-4))
         (var-6 (nth 2 pred-2))
         (pred-7 (variable-value var-6))
         (var-8 (nth 1 pred-7))
         (pred-9 (variable-value var-8))
         (var-10 (nth 1 pred-9))
         (var-11 (variable-value var-10))
         (var-12 (nth 2 pred-9))
         (var-13 (variable-value var-12))
         (var-14 (aref *trail-array* 1))
         (pred-15 (variable-value var-14))
         (var-16 (nth 1 pred-15))
         (var-17 (variable-value var-16))
         (var-18 (nth 2 pred-15))
         (var-19 (variable-value var-18)))
    (5am:is (= 2 *trail*))
    (5am:is (= '2 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (eql 'g/2 (first pred-2)))
    (5am:is (= '3 (variable-level var-3)))
    (5am:is (equal 'x (variable-name var-3)))
    (5am:is (= '2 (variable-level var-4)))
    (5am:is (equal 'y (variable-name var-4)))
    (5am:is (= '2 (variable-level var-5)))
    (5am:is (equal 'v (variable-name var-5)))
    (5am:is (equal 'nil (variable-value var-5)))
    (5am:is (= '3 (variable-level var-6)))
    (5am:is (equal 'y (variable-name var-6)))
    (5am:is (eql 'k/1 (first pred-7)))
    (5am:is (= '1 (variable-level var-8)))
    (5am:is (equal 'x (variable-name var-8)))
    (5am:is (eql 'h/2 (first pred-9)))
    (5am:is (= '2 (variable-level var-10)))
    (5am:is (equal 'y (variable-name var-10)))
    (5am:is (= '2 (variable-level var-11)))
    (5am:is (equal 'v (variable-name var-11)))
    (5am:is (equal 'nil (variable-value var-11)))
    (5am:is (= '4 (variable-level var-12)))
    (5am:is (equal 'y (variable-name var-12)))
    (5am:is (= '2 (variable-level var-13)))
    (5am:is (equal 'v (variable-name var-13)))
    (5am:is (equal 'nil (variable-value var-13)))
    (5am:is (= '1 (variable-level var-14)))
    (5am:is (equal 'x (variable-name var-14)))
    (5am:is (eql 'h/2 (first pred-15)))
    (5am:is (= '2 (variable-level var-16)))
    (5am:is (equal 'y (variable-name var-16)))
    (5am:is (= '2 (variable-level var-17)))
    (5am:is (equal 'v (variable-name var-17)))
    (5am:is (equal 'nil (variable-value var-17)))
    (5am:is (= '4 (variable-level var-18)))
    (5am:is (equal 'y (variable-name var-18)))
    (5am:is (= '2 (variable-level var-19)))
    (5am:is (equal 'v (variable-name var-19)))
    (5am:is (equal 'nil (variable-value var-19)))))

#+5AM
(define-integration-test chang&lee-test-2
  (program '(u v w x y z)
           '((p e x x) (p x e x) (p x x e) (p a b c)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p b a c)) !)))
           :incomplete-inference t)
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (var-2 (variable-value var-1))
         (var-3 (aref *trail-array* 1))
         (var-4 (aref *trail-array* 2))
         (var-5 (aref *trail-array* 3))
         (var-6 (aref *trail-array* 4))
         (var-7 (aref *trail-array* 5))
         (var-8 (aref *trail-array* 6))
         (var-9 (aref *trail-array* 7)))
    (5am:is (= 8 *trail*))
    (5am:is (= '3 (variable-level var-1)))
    (5am:is (equal 'y (variable-name var-1)))
    (5am:is (= '2 (variable-level var-2)))
    (5am:is (equal 'x (variable-name var-2)))
    (5am:is (equal 'c (variable-value var-2)))
    (5am:is (= '3 (variable-level var-3)))
    (5am:is (equal 'u (variable-name var-3)))
    (5am:is (equal 'e (variable-value var-3)))
    (5am:is (= '5 (variable-level var-4)))
    (5am:is (equal 'x (variable-name var-4)))
    (5am:is (equal 'a (variable-value var-4)))
    (5am:is (= '5 (variable-level var-5)))
    (5am:is (equal 'y (variable-name var-5)))
    (5am:is (equal 'b (variable-value var-5)))
    (5am:is (= '2 (variable-level var-6)))
    (5am:is (equal 'x (variable-name var-6)))
    (5am:is (equal 'c (variable-value var-6)))
    (5am:is (= '3 (variable-level var-7)))
    (5am:is (equal 'z (variable-name var-7)))
    (5am:is (equal 'b (variable-value var-7)))
    (5am:is (= '5 (variable-level var-8)))
    (5am:is (equal 'v (variable-name var-8)))
    (5am:is (equal 'e (variable-value var-8)))
    (5am:is (= '2 (variable-level var-9)))
    (5am:is (equal 'y (variable-name var-9)))
    (5am:is (equal 'a (variable-value var-9)))))

#+5AM
(define-integration-test chang&lee-test-3
  (program '(u v w x y z)
           '((p e x x) (p (i x) x e)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p a e a)) !)))
           :incomplete-inference t)
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (variable-value var-3))
         (pred-5 (variable-value var-4))
         (var-6 (nth 1 pred-5))
         (var-7 (variable-value var-6))
         (var-8 (aref *trail-array* 1))
         (var-9 (aref *trail-array* 2))
         (pred-10 (variable-value var-9))
         (var-11 (nth 1 pred-10))
         (var-12 (variable-value var-11))
         (var-13 (aref *trail-array* 3))
         (var-14 (aref *trail-array* 4))
         (var-15 (aref *trail-array* 5))
         (var-16 (aref *trail-array* 6))
         (pred-17 (variable-value var-16))
         (var-18 (nth 1 pred-17))
         (var-19 (variable-value var-18))
         (var-20 (aref *trail-array* 7)))
    (5am:is (= 8 *trail*))
    (5am:is (= '2 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (eql 'i/1 (first pred-2)))
    (5am:is (= '4 (variable-level var-3)))
    (5am:is (equal 'x (variable-name var-3)))
    (5am:is (= '3 (variable-level var-4)))
    (5am:is (equal 'y (variable-name var-4)))
    (5am:is (eql 'i/1 (first pred-5)))
    (5am:is (= '5 (variable-level var-6)))
    (5am:is (equal 'x (variable-name var-6)))
    (5am:is (= '3 (variable-level var-7)))
    (5am:is (equal 'z (variable-name var-7)))
    (5am:is (equal 'a (variable-value var-7)))
    (5am:is (= '3 (variable-level var-8)))
    (5am:is (equal 'u (variable-name var-8)))
    (5am:is (equal 'e (variable-value var-8)))
    (5am:is (= '3 (variable-level var-9)))
    (5am:is (equal 'y (variable-name var-9)))
    (5am:is (eql 'i/1 (first pred-10)))
    (5am:is (= '5 (variable-level var-11)))
    (5am:is (equal 'x (variable-name var-11)))
    (5am:is (= '3 (variable-level var-12)))
    (5am:is (equal 'z (variable-name var-12)))
    (5am:is (equal 'a (variable-value var-12)))
    (5am:is (= '2 (variable-level var-13)))
    (5am:is (equal 'y (variable-name var-13)))
    (5am:is (equal 'e (variable-value var-13)))
    (5am:is (= '3 (variable-level var-14)))
    (5am:is (equal 'z (variable-name var-14)))
    (5am:is (equal 'a (variable-value var-14)))
    (5am:is (= '2 (variable-level var-15)))
    (5am:is (equal 'v (variable-name var-15)))
    (5am:is (equal 'e (variable-value var-15)))
    (5am:is (= '8 (variable-level var-16)))
    (5am:is (equal 'y (variable-name var-16)))
    (5am:is (eql 'i/1 (first pred-17)))
    (5am:is (= '5 (variable-level var-18)))
    (5am:is (equal 'x (variable-name var-18)))
    (5am:is (= '3 (variable-level var-19)))
    (5am:is (equal 'z (variable-name var-19)))
    (5am:is (equal 'a (variable-value var-19)))
    (5am:is (= '8 (variable-level var-20)))
    (5am:is (equal 'u (variable-name var-20)))
    (5am:is (equal 'e (variable-value var-20)))))

#+5AM
(define-integration-test chang&lee-test-4
  (program '(u v w x y z)
           '((p e x x) (p (i x) x e)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p a x e)) !)))
           :incomplete-inference t)
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (variable-value var-3))
         (pred-5 (variable-value var-4))
         (var-6 (nth 1 pred-5))
         (var-7 (variable-value var-6))
         (var-8 (aref *trail-array* 1))
         (var-9 (aref *trail-array* 2))
         (pred-10 (variable-value var-9))
         (var-11 (nth 1 pred-10))
         (var-12 (variable-value var-11))
         (var-13 (aref *trail-array* 3))
         (var-14 (aref *trail-array* 4))
         (var-15 (aref *trail-array* 5))
         (var-16 (variable-value var-15))
         (pred-17 (variable-value var-16))
         (var-18 (nth 1 pred-17))
         (var-19 (variable-value var-18)))
    (5am:is (= 6 *trail*))
    (5am:is (= '2 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (eql 'i/1 (first pred-2)))
    (5am:is (= '4 (variable-level var-3)))
    (5am:is (equal 'x (variable-name var-3)))
    (5am:is (= '3 (variable-level var-4)))
    (5am:is (equal 'y (variable-name var-4)))
    (5am:is (eql 'i/1 (first pred-5)))
    (5am:is (= '5 (variable-level var-6)))
    (5am:is (equal 'x (variable-name var-6)))
    (5am:is (= '3 (variable-level var-7)))
    (5am:is (equal 'z (variable-name var-7)))
    (5am:is (equal 'a (variable-value var-7)))
    (5am:is (= '3 (variable-level var-8)))
    (5am:is (equal 'u (variable-name var-8)))
    (5am:is (equal 'e (variable-value var-8)))
    (5am:is (= '3 (variable-level var-9)))
    (5am:is (equal 'y (variable-name var-9)))
    (5am:is (eql 'i/1 (first pred-10)))
    (5am:is (= '5 (variable-level var-11)))
    (5am:is (equal 'x (variable-name var-11)))
    (5am:is (= '3 (variable-level var-12)))
    (5am:is (equal 'z (variable-name var-12)))
    (5am:is (equal 'a (variable-value var-12)))
    (5am:is (= '2 (variable-level var-13)))
    (5am:is (equal 'y (variable-name var-13)))
    (5am:is (equal 'e (variable-value var-13)))
    (5am:is (= '3 (variable-level var-14)))
    (5am:is (equal 'z (variable-name var-14)))
    (5am:is (equal 'a (variable-value var-14)))
    (5am:is (= '2 (variable-level var-15)))
    (5am:is (equal 'v (variable-name var-15)))
    (5am:is (= '1 (variable-level var-16)))
    (5am:is (equal 'x (variable-name var-16)))
    (5am:is (eql 'i/1 (first pred-17)))
    (5am:is (= '5 (variable-level var-18)))
    (5am:is (equal 'x (variable-name var-18)))
    (5am:is (= '3 (variable-level var-19)))
    (5am:is (equal 'z (variable-name var-19)))
    (5am:is (equal 'a (variable-value var-19)))))

#+5AM
(define-integration-test chang&lee-test-5
  (program '(u v w x y z)
           '((p e x x) (p x e x) (p x (i x) e) (p (i x) x e) (s a)
             (-> (and (s x) (s y) (p x (i y) z)) (s z))
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (s e)) !)))
           :incomplete-inference t)
  (query)
  (let* ((var-1 (aref *trail-array* 0)))
    (5am:is (= 1 *trail*))
    (5am:is (= '2 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (equal 'a (variable-value var-1)))))

#+5AM
(define-integration-test chang&lee-test-6
  (program '(u v w x y z)
           '((p e x x) (p x e x) (p x (i x) e) (p (i x) x e) (s a)
             (-> (and (s x) (s y) (p x (i y) z)) (s z))
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (s (i a))) !)))
           :incomplete-inference t)
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (var-2 (aref *trail-array* 1))
         (var-3 (aref *trail-array* 2)))
    (5am:is (= 3 *trail*))
    (5am:is (= '3 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (equal 'a (variable-value var-1)))
    (5am:is (= '3 (variable-level var-2)))
    (5am:is (equal 'y (variable-name var-2)))
    (5am:is (equal 'a (variable-value var-2)))
    (5am:is (= '2 (variable-level var-3)))
    (5am:is (equal 'x (variable-name var-3)))
    (5am:is (equal 'e (variable-value var-3)))))

#+5AM
(define-integration-test chang&lee-test-7
  (program '(u x y z)
           '((p a) (m a (s c) (s b)) (m x x (s x)) (or (~m x y z) (m y x z))
             (or (~m x y z) (d x z))
             (or (~p x) (~m y z u) (~d x u) (d x y) (d x z))
             (<- (query) (and (search (d a b)) !))))
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (var-2 (aref *trail-array* 1))
         (pred-3 (variable-value var-2)))
    (5am:is (= 2 *trail*))
    (5am:is (= '2 (variable-level var-1)))
    (5am:is (equal 'z (variable-name var-1)))
    (5am:is (equal 'b (variable-value var-1)))
    (5am:is (= '2 (variable-level var-2)))
    (5am:is (equal 'u (variable-name var-2)))
    (5am:is (eql 's/1 (first pred-3)))
    (5am:is (equal 'b (nth 1 pred-3)))))

#+5AM
(define-integration-test chang&lee-test-8
  (program '(x y z)
           '((l 1 a) (d x x) (or (p x) (d (g x) x)) (or (p x) (l 1 (g x)))
             (or (p x) (l (g x) x)) (or (~p x) (~d x a))
             (or (~d x y) (~d y z) (d x z)) (or (~l 1 x) (~l x a) (p (f x)))
             (or (~l 1 x) (~l x a) (d (f x) x))
             (<- (query) (and (search (and (p x) (d x a))) !))))
  (query)
  (let* ((var-1 (aref *trail-array* 0)))
    (5am:is (= 1 *trail*))
    (5am:is (= '1 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (equal 'a (variable-value var-1)))))

#+5AM
(define-integration-test chang&lee-test-9
  (program '(x y)
           '((l x (f x)) (~l x x) (or (~l x y) (~l y x))
             (or (~d x (f y)) (l y x)) (or (p x) (d (h x) x))
             (or (p x) (p (h x))) (or (p x) (l (h x) x))
             (or (~p x) (~l a x) (l (f a) x))
             (<- (query) (and (search (and (p x) (l a x) (~l (f a) x))) !))))
  (query)
  (let* ((var-1 (aref *trail-array* 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2)))
    (5am:is (= 1 *trail*))
    (5am:is (= '1 (variable-level var-1)))
    (5am:is (equal 'x (variable-name var-1)))
    (5am:is (eql 'f/1 (first pred-2)))
    (5am:is (= '3 (variable-level var-3)))
    (5am:is (equal 'y (variable-name var-3)))
    (5am:is (equal 'a (variable-value var-3)))))

