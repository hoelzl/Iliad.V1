;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: PTTPP; Base: 10; common-lisp-style: poem -*-

;;; THIS FILE IS AUTOMATICALLY GENERATED BY THE INTEGRATION TEST GENERATOR.
;;; Edit generate-integration-tests.lisp instead of this file. 

;;; Copyright (c) 1986 Mark E. Stickel, SRI International, Menlo Park, CA 94025 USA
;;; Copyright (c) 2012 Matthias HÃ¶lzl
;;; 
;;; This file is licensed under the MIT license; see the file LICENSE
;;; in the root directory for further information.

(defun undefine-all-test-predicates ()
  (undefine-predicates 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm
                       'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z
                       'member))

(in-package #:pttpp)
(declaim (optimize (debug 3)))


#+5AM
(define-integration-test simple-integration-test-01
  (undefine-all-test-predicates)
  (program 'nil '((f a b) (<- (query) (f a b))) :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ()
    (it.bese.fiveam:is (= -1 (rt-trail-index *runtime-data*)))))

#+5AM
(define-integration-test simple-integration-test-02
  (undefine-all-test-predicates)
  (program '(x y) '((g a b) (<- (f x y) (g x y)) (<- (query) (f x b)))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-03
  (undefine-all-test-predicates)
  (program '(x y) '((f a b) (<- (query) (and (f x b)))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-04
  (undefine-all-test-predicates)
  (program '(x y)
           '((g a b) (g c d) (g a d) (h a a) (h a b) (h c c)
             (<- (f x y) (and (g x y) (h x x)))
             (<- (query) (and (f x b) (f c y) (f x y)))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'y (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'd (variable-value var-2)))))

#+5AM
(define-integration-test simple-integration-test-04a
  (undefine-all-test-predicates)
  (program '(x y)
           '((g a b) (g c d) (g a d) (h a a) (h a b) (h c c)
             (<- (f x y) (and (g x y) (h x x)))
             (<- (query) (and (f x d) (f c y) (f x y))))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'c (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'y (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'd (variable-value var-2)))))

#+5AM
(define-integration-test simple-integration-test-04b
  (undefine-all-test-predicates)
  (program '(x y)
           '((g a b) (g c d) (g a d) (h a b) (h c c)
             (<- (f x y) (and (g x y) (h x x)))
             (<- (query) (and (f x b) (f c y) (f x y)))))
  (query)
  (undefine-all-test-predicates)
  (let* ()
    (it.bese.fiveam:is (= -1 (rt-trail-index *runtime-data*)))))

#+5AM
(define-integration-test simple-integration-test-05
  (undefine-all-test-predicates)
  (program '(x y)
           '((g a b) (g c d) (g a d) (h a a) (h a b) (h c c)
             (<- (f x y) (or (g x y) (h x x)))
             (<- (query) (and (f x b) (f c y) (f x y)))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'y (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'd (variable-value var-2)))))

#+5AM
(define-integration-test simple-integration-test-06
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs))
             (<- (member x (cons y zs)) (and (|\\==| x y) (member x zs)))
             (<- (query) (member x (cons a (cons b (cons c nil)))))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-07
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs))
             (<- (member x (cons y zs)) (and (|\\==| x y) (member x zs)))
             (<- (query) (search (member x (cons a (cons b (cons c nil))))))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-08
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs)) (<- (member x (cons y zs)) (member x zs))
             (<- (query) (search (member x (cons a (cons b (cons c nil))))))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-09
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs)) (<- (member x (cons y zs)) (member x zs))
             (<- (query) (search (member x y) 5))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (nth 2 pred-2)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is (eql 'cons/2 (first pred-2)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 1 :value nil :name x) (nth 1 pred-2)))
    (it.bese.fiveam:is (= '1 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'x (variable-name var-3)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-3)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name zs) (nth 2 pred-2)))
    (it.bese.fiveam:is (= '2 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'zs (variable-name var-4)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-4)))))

#+5AM
(define-integration-test simple-integration-test-09a
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs)) (<- (member x (cons y zs)) (member x zs))
             (<- (query) (search (member x y) 1000))))
  (let ((*print-trail* nil))
    (query))
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (nth 2 pred-2)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is (eql 'cons/2 (first pred-2)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 1 :value nil :name x) (nth 1 pred-2)))
    (it.bese.fiveam:is (= '1 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'x (variable-name var-3)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-3)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name zs) (nth 2 pred-2)))
    (it.bese.fiveam:is (= '2 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'zs (variable-name var-4)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-4)))))

#+5AM
(define-integration-test simple-integration-test-10
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs))
             (<- (member x (cons y zs)) (and (|\\==| x y) (member x zs) !))
             (<- (query) (member x (cons a (cons b (cons c nil)))))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-10a
  (undefine-all-test-predicates)
  (program '(x y zs)
           '((member x (cons x zs))
             (<- (member x (cons y zs)) (and (|\\==| x y) (member x zs) !))
             (<- (query) (search (member x (cons a (cons b (cons c nil))))))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-11
  (undefine-all-test-predicates)
  (program '(x y) '((<- (query) (and (= x a) (|\\=| x b)))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))))

#+5AM
(define-integration-test simple-integration-test-12
  (undefine-all-test-predicates)
  (program '(x y z)
           '((<- (f x y) (~g x y)) (<- (g x y) (~f x y)) (<- (~g x y) (g y x))
             (g a b) (<- (query) (f x y))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (variable-value var-1)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 1 :value nil :name x)
             (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'x (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-2)))))

#+5AM
(define-integration-test simple-integration-test-13
  (undefine-all-test-predicates)
  (program '(x y z)
           '((<- (f x y) (~g x y)) (<- (g x y) (~f x y)) (<- (g x y) (~g y x))
             (g a b) (<- (query) (f x y)))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (variable-value var-1)))
    (it.bese.fiveam:is (= 0 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 1 :value nil :name x)
             (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'x (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-2)))))

#+5AM
(define-integration-test simple-integration-test-14
  (undefine-all-test-predicates)
  (program '(x y z)
           '((<- (f x y) (~g x y)) (<- (g x y) (~f x y))
             (<- (~g x y) (and (|\\=| x y) (g y x))) (g a b)
             (<- (query) (f x y)))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ()
    (it.bese.fiveam:is (= -1 (rt-trail-index *runtime-data*)))))

#+5AM
(define-integration-test simple-integration-test-14a
  (undefine-all-test-predicates)
  (program '(x y z)
           '((<- (f x y) (~g x y)) (<- (g x y) (~f x y))
             (<- (~g x y) (and (|\\=| x y) (g y x))) (g a b)
             (<- (query) (~g x y)))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ()
    (it.bese.fiveam:is (= -1 (rt-trail-index *runtime-data*)))))

#+5AM
(define-integration-test simple-integration-test-14b
  (undefine-all-test-predicates)
  (program '(x y z)
           '((<- (f x y) (~g x y)) (<- (~g x y) (and (g y x) (|\\=| x y)))
             (g a b) (<- (query) (f x y)))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'x (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'b (variable-value var-2)))))

#+5AM
(define-integration-test simple-integration-test-14c
  (undefine-all-test-predicates)
  (program '(x y z)
           '((<- (f x y) (~g x y)) (<- (g x y) (and (~g y x) (|\\=| x y)))
             (g a b) (<- (query) (f x y)))
           :traceable nil)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '1 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'x (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'b (variable-value var-2)))))

#+5AM
(define-integration-test chang&lee-test-1
  (undefine-all-test-predicates)
  (program '(u v w x y z)
           '((p (g x y) x y) (p x (h x y) y)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p (k x) x (k x))) !)))
           :incomplete-inference t)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (variable-value var-3))
         (var-5 (variable-value var-4))
         (var-6 (nth 2 pred-2))
         (pred-7 (variable-value var-6))
         (var-8 (nth 1 pred-7))
         (pred-9 (variable-value var-8))
         (var-10 (nth 1 pred-9))
         (var-11 (variable-value var-10))
         (var-12 (nth 2 pred-9))
         (var-13 (variable-value var-12))
         (var-14 (aref (rt-trail-array *runtime-data*) 1))
         (pred-15 (variable-value var-14))
         (var-16 (nth 1 pred-15))
         (var-17 (variable-value var-16))
         (var-18 (nth 2 pred-15))
         (var-19 (variable-value var-18))
         (var-20 (aref (rt-trail-array *runtime-data*) 2))
         (var-21 (variable-value var-20)))
    (it.bese.fiveam:is (= 2 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '2 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (eql 'g/2 (first pred-2)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 3
          :value #S(logic-variable
                    :level 2
                    :value #S(logic-variable :level 2 :value nil :name v)
                    :name y)
          :name x)
      (nth 1 pred-2)))
    (it.bese.fiveam:is (= '3 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'x (variable-name var-3)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 2
          :value #S(logic-variable :level 2 :value nil :name v)
          :name y)
      (variable-value var-3)))
    (it.bese.fiveam:is (= '2 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'y (variable-name var-4)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name v)
             (variable-value var-4)))
    (it.bese.fiveam:is (= '2 (variable-level var-5)))
    (it.bese.fiveam:is (eql 'v (variable-name var-5)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-5)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 3
          :value (k/1
                  #S(logic-variable
                     :level 1
                     :value (h/2
                             #S(logic-variable
                                :level 2
                                :value #S(logic-variable
                                          :level 2
                                          :value nil
                                          :name v)
                                :name y)
                             #S(logic-variable
                                :level 4
                                :value #S(logic-variable
                                          :level 2
                                          :value nil
                                          :name v)
                                :name y))
                     :name x))
          :name y)
      (nth 2 pred-2)))
    (it.bese.fiveam:is (= '3 (variable-level var-6)))
    (it.bese.fiveam:is (eql 'y (variable-name var-6)))
    (it.bese.fiveam:is (eql 'k/1 (first pred-7)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 1
          :value (h/2
                  #S(logic-variable
                     :level 2
                     :value #S(logic-variable :level 2 :value nil :name v)
                     :name y)
                  #S(logic-variable
                     :level 4
                     :value #S(logic-variable :level 2 :value nil :name v)
                     :name y))
          :name x)
      (nth 1 pred-7)))
    (it.bese.fiveam:is (= '1 (variable-level var-8)))
    (it.bese.fiveam:is (eql 'x (variable-name var-8)))
    (it.bese.fiveam:is (eql 'h/2 (first pred-9)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 2
          :value #S(logic-variable :level 2 :value nil :name v)
          :name y)
      (nth 1 pred-9)))
    (it.bese.fiveam:is (= '2 (variable-level var-10)))
    (it.bese.fiveam:is (eql 'y (variable-name var-10)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name v)
             (variable-value var-10)))
    (it.bese.fiveam:is (= '2 (variable-level var-11)))
    (it.bese.fiveam:is (eql 'v (variable-name var-11)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-11)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 4
          :value #S(logic-variable :level 2 :value nil :name v)
          :name y)
      (nth 2 pred-9)))
    (it.bese.fiveam:is (= '4 (variable-level var-12)))
    (it.bese.fiveam:is (eql 'y (variable-name var-12)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name v)
             (variable-value var-12)))
    (it.bese.fiveam:is (= '2 (variable-level var-13)))
    (it.bese.fiveam:is (eql 'v (variable-name var-13)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-13)))
    (it.bese.fiveam:is (= '1 (variable-level var-14)))
    (it.bese.fiveam:is (eql 'x (variable-name var-14)))
    (it.bese.fiveam:is (eql 'h/2 (first pred-15)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 2
          :value #S(logic-variable :level 2 :value nil :name v)
          :name y)
      (nth 1 pred-15)))
    (it.bese.fiveam:is (= '2 (variable-level var-16)))
    (it.bese.fiveam:is (eql 'y (variable-name var-16)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name v)
             (variable-value var-16)))
    (it.bese.fiveam:is (= '2 (variable-level var-17)))
    (it.bese.fiveam:is (eql 'v (variable-name var-17)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-17)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 4
          :value #S(logic-variable :level 2 :value nil :name v)
          :name y)
      (nth 2 pred-15)))
    (it.bese.fiveam:is (= '4 (variable-level var-18)))
    (it.bese.fiveam:is (eql 'y (variable-name var-18)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name v)
             (variable-value var-18)))
    (it.bese.fiveam:is (= '2 (variable-level var-19)))
    (it.bese.fiveam:is (eql 'v (variable-name var-19)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-19)))
    (it.bese.fiveam:is (= '2 (variable-level var-20)))
    (it.bese.fiveam:is (eql 'y (variable-name var-20)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value nil :name v)
             (variable-value var-20)))
    (it.bese.fiveam:is (= '2 (variable-level var-21)))
    (it.bese.fiveam:is (eql 'v (variable-name var-21)))
    (it.bese.fiveam:is (equalp 'nil (variable-value var-21)))))

#+5AM
(define-integration-test chang&lee-test-2
  (undefine-all-test-predicates)
  (program '(u v w x y z)
           '((p e x x) (p x e x) (p x x e) (p a b c)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p b a c)) !)))
           :incomplete-inference t)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (variable-value var-1))
         (var-3 (aref (rt-trail-array *runtime-data*) 1))
         (var-4 (aref (rt-trail-array *runtime-data*) 2))
         (var-5 (aref (rt-trail-array *runtime-data*) 3))
         (var-6 (aref (rt-trail-array *runtime-data*) 4))
         (var-7 (aref (rt-trail-array *runtime-data*) 5))
         (var-8 (aref (rt-trail-array *runtime-data*) 6))
         (var-9 (aref (rt-trail-array *runtime-data*) 7))
         (var-10 (aref (rt-trail-array *runtime-data*) 8)))
    (it.bese.fiveam:is (= 8 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '3 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'y (variable-name var-1)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 2 :value c :name x)
             (variable-value var-1)))
    (it.bese.fiveam:is (= '2 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'x (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'c (variable-value var-2)))
    (it.bese.fiveam:is (= '3 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'u (variable-name var-3)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-3)))
    (it.bese.fiveam:is (= '5 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'x (variable-name var-4)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-4)))
    (it.bese.fiveam:is (= '5 (variable-level var-5)))
    (it.bese.fiveam:is (eql 'y (variable-name var-5)))
    (it.bese.fiveam:is (equalp 'b (variable-value var-5)))
    (it.bese.fiveam:is (= '2 (variable-level var-6)))
    (it.bese.fiveam:is (eql 'x (variable-name var-6)))
    (it.bese.fiveam:is (equalp 'c (variable-value var-6)))
    (it.bese.fiveam:is (= '3 (variable-level var-7)))
    (it.bese.fiveam:is (eql 'z (variable-name var-7)))
    (it.bese.fiveam:is (equalp 'b (variable-value var-7)))
    (it.bese.fiveam:is (= '5 (variable-level var-8)))
    (it.bese.fiveam:is (eql 'v (variable-name var-8)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-8)))
    (it.bese.fiveam:is (= '2 (variable-level var-9)))
    (it.bese.fiveam:is (eql 'y (variable-name var-9)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-9)))
    (it.bese.fiveam:is (= '2 (variable-level var-10)))
    (it.bese.fiveam:is (eql 'v (variable-name var-10)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-10)))))

#+5AM
(define-integration-test chang&lee-test-3
  (undefine-all-test-predicates)
  (program '(u v w x y z)
           '((p e x x) (p (i x) x e)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p a e a)) !)))
           :incomplete-inference t)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (variable-value var-3))
         (pred-5 (variable-value var-4))
         (var-6 (nth 1 pred-5))
         (var-7 (variable-value var-6))
         (var-8 (aref (rt-trail-array *runtime-data*) 1))
         (var-9 (aref (rt-trail-array *runtime-data*) 2))
         (pred-10 (variable-value var-9))
         (var-11 (nth 1 pred-10))
         (var-12 (variable-value var-11))
         (var-13 (aref (rt-trail-array *runtime-data*) 3))
         (var-14 (aref (rt-trail-array *runtime-data*) 4))
         (var-15 (aref (rt-trail-array *runtime-data*) 5))
         (var-16 (aref (rt-trail-array *runtime-data*) 6))
         (pred-17 (variable-value var-16))
         (var-18 (nth 1 pred-17))
         (var-19 (variable-value var-18))
         (var-20 (aref (rt-trail-array *runtime-data*) 7))
         (var-21 (aref (rt-trail-array *runtime-data*) 8)))
    (it.bese.fiveam:is (= 8 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '2 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-2)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 4
          :value #S(logic-variable
                    :level 3
                    :value (i/1
                            #S(logic-variable
                               :level 5
                               :value #S(logic-variable
                                         :level 3
                                         :value a
                                         :name z)
                               :name x))
                    :name y)
          :name x)
      (nth 1 pred-2)))
    (it.bese.fiveam:is (= '4 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'x (variable-name var-3)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 3
          :value (i/1
                  #S(logic-variable
                     :level 5
                     :value #S(logic-variable :level 3 :value a :name z)
                     :name x))
          :name y)
      (variable-value var-3)))
    (it.bese.fiveam:is (= '3 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'y (variable-name var-4)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-5)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-5)))
    (it.bese.fiveam:is (= '5 (variable-level var-6)))
    (it.bese.fiveam:is (eql 'x (variable-name var-6)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-6)))
    (it.bese.fiveam:is (= '3 (variable-level var-7)))
    (it.bese.fiveam:is (eql 'z (variable-name var-7)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-7)))
    (it.bese.fiveam:is (= '3 (variable-level var-8)))
    (it.bese.fiveam:is (eql 'u (variable-name var-8)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-8)))
    (it.bese.fiveam:is (= '3 (variable-level var-9)))
    (it.bese.fiveam:is (eql 'y (variable-name var-9)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-10)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-10)))
    (it.bese.fiveam:is (= '5 (variable-level var-11)))
    (it.bese.fiveam:is (eql 'x (variable-name var-11)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-11)))
    (it.bese.fiveam:is (= '3 (variable-level var-12)))
    (it.bese.fiveam:is (eql 'z (variable-name var-12)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-12)))
    (it.bese.fiveam:is (= '2 (variable-level var-13)))
    (it.bese.fiveam:is (eql 'y (variable-name var-13)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-13)))
    (it.bese.fiveam:is (= '3 (variable-level var-14)))
    (it.bese.fiveam:is (eql 'z (variable-name var-14)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-14)))
    (it.bese.fiveam:is (= '2 (variable-level var-15)))
    (it.bese.fiveam:is (eql 'v (variable-name var-15)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-15)))
    (it.bese.fiveam:is (= '8 (variable-level var-16)))
    (it.bese.fiveam:is (eql 'y (variable-name var-16)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-17)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-17)))
    (it.bese.fiveam:is (= '5 (variable-level var-18)))
    (it.bese.fiveam:is (eql 'x (variable-name var-18)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-18)))
    (it.bese.fiveam:is (= '3 (variable-level var-19)))
    (it.bese.fiveam:is (eql 'z (variable-name var-19)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-19)))
    (it.bese.fiveam:is (= '8 (variable-level var-20)))
    (it.bese.fiveam:is (eql 'u (variable-name var-20)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-20)))
    (it.bese.fiveam:is (= '8 (variable-level var-21)))
    (it.bese.fiveam:is (eql 'z (variable-name var-21)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-21)))))

#+5AM
(define-integration-test chang&lee-test-4
  (undefine-all-test-predicates)
  (program '(u v w x y z)
           '((p e x x) (p (i x) x e)
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (p a x e)) !)))
           :incomplete-inference t)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (variable-value var-3))
         (pred-5 (variable-value var-4))
         (var-6 (nth 1 pred-5))
         (var-7 (variable-value var-6))
         (var-8 (aref (rt-trail-array *runtime-data*) 1))
         (var-9 (aref (rt-trail-array *runtime-data*) 2))
         (pred-10 (variable-value var-9))
         (var-11 (nth 1 pred-10))
         (var-12 (variable-value var-11))
         (var-13 (aref (rt-trail-array *runtime-data*) 3))
         (var-14 (aref (rt-trail-array *runtime-data*) 4))
         (var-15 (aref (rt-trail-array *runtime-data*) 5))
         (var-16 (variable-value var-15))
         (pred-17 (variable-value var-16))
         (var-18 (nth 1 pred-17))
         (var-19 (variable-value var-18))
         (var-20 (aref (rt-trail-array *runtime-data*) 6))
         (pred-21 (variable-value var-20))
         (var-22 (nth 1 pred-21))
         (var-23 (variable-value var-22)))
    (it.bese.fiveam:is (= 6 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '2 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-2)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 4
          :value #S(logic-variable
                    :level 3
                    :value (i/1
                            #S(logic-variable
                               :level 5
                               :value #S(logic-variable
                                         :level 3
                                         :value a
                                         :name z)
                               :name x))
                    :name y)
          :name x)
      (nth 1 pred-2)))
    (it.bese.fiveam:is (= '4 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'x (variable-name var-3)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 3
          :value (i/1
                  #S(logic-variable
                     :level 5
                     :value #S(logic-variable :level 3 :value a :name z)
                     :name x))
          :name y)
      (variable-value var-3)))
    (it.bese.fiveam:is (= '3 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'y (variable-name var-4)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-5)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-5)))
    (it.bese.fiveam:is (= '5 (variable-level var-6)))
    (it.bese.fiveam:is (eql 'x (variable-name var-6)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-6)))
    (it.bese.fiveam:is (= '3 (variable-level var-7)))
    (it.bese.fiveam:is (eql 'z (variable-name var-7)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-7)))
    (it.bese.fiveam:is (= '3 (variable-level var-8)))
    (it.bese.fiveam:is (eql 'u (variable-name var-8)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-8)))
    (it.bese.fiveam:is (= '3 (variable-level var-9)))
    (it.bese.fiveam:is (eql 'y (variable-name var-9)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-10)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-10)))
    (it.bese.fiveam:is (= '5 (variable-level var-11)))
    (it.bese.fiveam:is (eql 'x (variable-name var-11)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-11)))
    (it.bese.fiveam:is (= '3 (variable-level var-12)))
    (it.bese.fiveam:is (eql 'z (variable-name var-12)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-12)))
    (it.bese.fiveam:is (= '2 (variable-level var-13)))
    (it.bese.fiveam:is (eql 'y (variable-name var-13)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-13)))
    (it.bese.fiveam:is (= '3 (variable-level var-14)))
    (it.bese.fiveam:is (eql 'z (variable-name var-14)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-14)))
    (it.bese.fiveam:is (= '2 (variable-level var-15)))
    (it.bese.fiveam:is (eql 'v (variable-name var-15)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 1
          :value (i/1
                  #S(logic-variable
                     :level 5
                     :value #S(logic-variable :level 3 :value a :name z)
                     :name x))
          :name x)
      (variable-value var-15)))
    (it.bese.fiveam:is (= '1 (variable-level var-16)))
    (it.bese.fiveam:is (eql 'x (variable-name var-16)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-17)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-17)))
    (it.bese.fiveam:is (= '5 (variable-level var-18)))
    (it.bese.fiveam:is (eql 'x (variable-name var-18)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-18)))
    (it.bese.fiveam:is (= '3 (variable-level var-19)))
    (it.bese.fiveam:is (eql 'z (variable-name var-19)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-19)))
    (it.bese.fiveam:is (= '1 (variable-level var-20)))
    (it.bese.fiveam:is (eql 'x (variable-name var-20)))
    (it.bese.fiveam:is (eql 'i/1 (first pred-21)))
    (it.bese.fiveam:is
     (equalp
      '#S(logic-variable
          :level 5
          :value #S(logic-variable :level 3 :value a :name z)
          :name x)
      (nth 1 pred-21)))
    (it.bese.fiveam:is (= '5 (variable-level var-22)))
    (it.bese.fiveam:is (eql 'x (variable-name var-22)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name z)
             (variable-value var-22)))
    (it.bese.fiveam:is (= '3 (variable-level var-23)))
    (it.bese.fiveam:is (eql 'z (variable-name var-23)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-23)))))

#+5AM
(define-integration-test chang&lee-test-5
  (undefine-all-test-predicates)
  (program '(u v w x y z)
           '((p e x x) (p x e x) (p x (i x) e) (p (i x) x e) (s a)
             (-> (and (s x) (s y) (p x (i y) z)) (s z))
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (s e)) !)))
           :incomplete-inference t)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '2 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '2 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'y (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-2)))))

#+5AM
(define-integration-test chang&lee-test-6
  (undefine-all-test-predicates)
  (program '(u v w x y z)
           '((p e x x) (p x e x) (p x (i x) e) (p (i x) x e) (s a)
             (-> (and (s x) (s y) (p x (i y) z)) (s z))
             (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
             (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
             (<- (query) (and (search (s (i a))) !)))
           :incomplete-inference t)
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1))
         (var-3 (aref (rt-trail-array *runtime-data*) 2))
         (var-4 (aref (rt-trail-array *runtime-data*) 3)))
    (it.bese.fiveam:is (= 3 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '3 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '3 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'y (variable-name var-2)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-2)))
    (it.bese.fiveam:is (= '2 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'x (variable-name var-3)))
    (it.bese.fiveam:is (equalp 'e (variable-value var-3)))
    (it.bese.fiveam:is (= '2 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'y (variable-name var-4)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-4)))))

#+5AM
(define-integration-test chang&lee-test-7
  (undefine-all-test-predicates)
  (program '(u x y z)
           '((p a) (m a (s c) (s b)) (m x x (s x)) (or (~m x y z) (m y x z))
             (or (~m x y z) (d x z))
             (or (~p x) (~m y z u) (~d x u) (d x y) (d x z))
             (<- (query) (and (search (d a b)) !))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1))
         (pred-3 (variable-value var-2))
         (var-4 (aref (rt-trail-array *runtime-data*) 2))
         (pred-5 (variable-value var-4)))
    (it.bese.fiveam:is (= 2 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '2 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'z (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'b (variable-value var-1)))
    (it.bese.fiveam:is (= '2 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'u (variable-name var-2)))
    (it.bese.fiveam:is (eql 's/1 (first pred-3)))
    (it.bese.fiveam:is (equalp 'b (nth 1 pred-3)))
    (it.bese.fiveam:is (= '5 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'y (variable-name var-4)))
    (it.bese.fiveam:is (eql 's/1 (first pred-5)))
    (it.bese.fiveam:is (equalp 'c (nth 1 pred-5)))))

#+5AM
(define-integration-test chang&lee-test-8
  (undefine-all-test-predicates)
  (program '(x y z)
           '((l 1 a) (d x x) (or (p x) (d (g x) x)) (or (p x) (l 1 (g x)))
             (or (p x) (l (g x) x)) (or (~p x) (~d x a))
             (or (~d x y) (~d y z) (d x z)) (or (~l 1 x) (~l x a) (p (f x)))
             (or (~l 1 x) (~l x a) (d (f x) x))
             (<- (query) (and (search (and (p x) (d x a))) !))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (var-2 (aref (rt-trail-array *runtime-data*) 1))
         (pred-3 (variable-value var-2))
         (var-4 (nth 1 pred-3)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-1)))
    (it.bese.fiveam:is (= '7 (variable-level var-2)))
    (it.bese.fiveam:is (eql 'y (variable-name var-2)))
    (it.bese.fiveam:is (eql 'g/1 (first pred-3)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 1 :value a :name x) (nth 1 pred-3)))
    (it.bese.fiveam:is (= '1 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'x (variable-name var-4)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-4)))))

#+5AM
(define-integration-test chang&lee-test-9
  (undefine-all-test-predicates)
  (program '(x y)
           '((l x (f x)) (~l x x) (or (~l x y) (~l y x))
             (or (~d x (f y)) (l y x)) (or (p x) (d (h x) x))
             (or (p x) (p (h x))) (or (p x) (l (h x) x))
             (or (~p x) (~l a x) (l (f a) x))
             (<- (query) (and (search (and (p x) (l a x) (~l (f a) x))) !))))
  (query)
  (undefine-all-test-predicates)
  (let* ((var-1 (aref (rt-trail-array *runtime-data*) 0))
         (pred-2 (variable-value var-1))
         (var-3 (nth 1 pred-2))
         (var-4 (aref (rt-trail-array *runtime-data*) 1)))
    (it.bese.fiveam:is (= 1 (rt-trail-index *runtime-data*)))
    (it.bese.fiveam:is (= '1 (variable-level var-1)))
    (it.bese.fiveam:is (eql 'x (variable-name var-1)))
    (it.bese.fiveam:is (eql 'f/1 (first pred-2)))
    (it.bese.fiveam:is
     (equalp '#S(logic-variable :level 3 :value a :name y) (nth 1 pred-2)))
    (it.bese.fiveam:is (= '3 (variable-level var-3)))
    (it.bese.fiveam:is (eql 'y (variable-name var-3)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-3)))
    (it.bese.fiveam:is (= '3 (variable-level var-4)))
    (it.bese.fiveam:is (eql 'y (variable-name var-4)))
    (it.bese.fiveam:is (equalp 'a (variable-value var-4)))))

