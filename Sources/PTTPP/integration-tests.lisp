;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: PTTPP; Base: 10; common-lisp-style: poem -*-

;;; Copyright (c) 1986 Mark E. Stickel, SRI International, Menlo Park, CA 94025 USA
;;; Copyright (c) 2012 Matthias HÃ¶lzl
;;; 
;;; This file is licensed under the MIT license; see the file LICENSE
;;; in the root directory for further information.

(in-package #:pttpp)
(declaim (optimize (debug 3)))

#+5am
(define-integration-test chang&lee-test-1
  (program '(u v w x y z)
	   '((p (g x y) x y)
	     (p x (h x y) y)
	     (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
	     (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
	     (<- (query) (and (search (p (k x) x (k x))) !)))
	   :incomplete-inference t)
  (query)
  (5am:is (= 2 *trail*))
  (5am:is (equal '(2 g/2 (3 2 2) (3 k/1 (1 h/2 (2 2) (4 2))))
		 (aref *trail-array* 0)))
  (5am:is (equal '(1 h/2 (2 2) (4 2))
		 (aref *trail-array* 1))))

#+5am
(define-integration-test chang&lee-test-2
  (program '(u v w x y z)
	   '((p e x x)
	     (p x e x)
	     (p x x e)
	     (p a b c)
	     (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
	     (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
	     (<- (query) (and (search (p b a c)) !)))
	   :incomplete-inference t)
  (query)
  (5am:is (= 8 *trail*))
  (5am:is (equal '(3 2 . c)
		 (aref *trail-array* 0)))
  (5am:is (equal '(3 . e)
		 (aref *trail-array* 1)))
  (5am:is (equal '(5 . a)
		 (aref *trail-array* 2)))
  (5am:is (equal '(5 . b)
		 (aref *trail-array* 3)))
  (5am:is (equal '(2 . c)
		 (aref *trail-array* 4)))
  (5am:is (equal '(3 . b)
		 (aref *trail-array* 5)))
  (5am:is (equal '(5 . e)
		 (aref *trail-array* 6)))
  (5am:is (equal '(2 . a)
		 (aref *trail-array* 7))))

#+5am
(define-integration-test chang&lee-test-3
  (program '(u v w x y z)
	   '((p e x x)
	     (p (i x) x e)
	     (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
	     (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
	     (<- (query) (and (search (p a e a)) !)))
	   :incomplete-inference t)
  (query)
  (5am:is (= 8 *trail*))
  (5am:is (equal '(2 i/1 (4 3 i/1 (5 3 . a)))
		 (aref *trail-array* 0)))
  (5am:is (equal '(3 . e)
		 (aref *trail-array* 1)))
  (5am:is (equal '(3 i/1 (5 3 . a))
		 (aref *trail-array* 2)))
  (5am:is (equal '(2 . e)
		 (aref *trail-array* 3)))
  (5am:is (equal '(3 . a)
		 (aref *trail-array* 4)))
  (5am:is (equal '(2 . e)
		 (aref *trail-array* 5)))
  (5am:is (equal '(8 i/1 (5 3 . a))
		 (aref *trail-array* 6)))
  (5am:is (equal '(8 . e)
		 (aref *trail-array* 7))))

#+5am
(define-integration-test chang&lee-test-4
  (program '(u v w x y z)
	   '((p e x x)
	     (p (i x) x e)
	     (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
	     (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
	     (<- (query) (and (search (p a x e)) !)))
	   :incomplete-inference t)
  (query)
  (5am:is (= 6 *trail*))
  (5am:is (equal '(2 i/1 (4 3 i/1 (5 3 . a)))
		 (aref *trail-array* 0)))
  (5am:is (equal '(3 . e)
		 (aref *trail-array* 1)))
  (5am:is (equal '(3 i/1 (5 3 . a))
		 (aref *trail-array* 2)))
  (5am:is (equal '(2 . e)
		 (aref *trail-array* 3)))
  (5am:is (equal '(3 . a)
		 (aref *trail-array* 4)))
  (5am:is (equal '(2 1 i/1 (5 3 . a))
		 (aref *trail-array* 5))))

#+5am
(define-integration-test chang&lee-test-5
  (program '(u v w x y z)
	   '((p e x x)
	     (p x e x)
	     (p x (i x) e)
	     (p (i x) x e)
	     (s a)
	     (-> (and (s x) (s y) (p x (i y) z)) (s z))
	     (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
	     (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
	     (<- (query) (and (search (s e)) !)))
	   :incomplete-inference t)
  (query)
  (5am:is (= 1 *trail*))
  (5am:is (equal '(2 . a)
		 (aref *trail-array* 0))))

#+5am
(define-integration-test chang&lee-test-6
  (program '(u v w x y z)
	   '((p e x x)
	     (p x e x)
	     (p x (i x) e)
	     (p (i x) x e)
	     (s a)
	     (-> (and (s x) (s y) (p x (i y) z)) (s z))
	     (-> (and (p x y u) (p y z v) (p x v w)) (p u z w))
	     (-> (and (p x y u) (p y z v) (p u z w)) (p x v w))
	     (<- (query) (and (search (s (i a))) !)))
	   :incomplete-inference t)
  (query)
  (5am:is (= 3 *trail*))
  (5am:is (equal '(3 . a)
		 (aref *trail-array* 0)))
  (5am:is (equal '(3 . a)
		 (aref *trail-array* 1)))
  (5am:is (equal '(2 . e)
		 (aref *trail-array* 2))))

#+5am
(define-integration-test chang&lee-test-7
  (program '(u x y z)
	   '((p a)
	     (m a (s c) (s b))
	     (m x x (s x))
	     (or (~m x y z) (m y x z))
	     (or (~m x y z) (d x z))
	     (or (~p x) (~m y z u) (~d x u) (d x y) (d x z))
	     (<- (query) (and (search (d a b)) !))))
  (query)
  (5am:is (= 2 *trail*))
  (5am:is (equal '(2 . b)
		 (aref *trail-array* 0)))
  (5am:is (equal '(2 s/1 b)
		 (aref *trail-array* 1))))

#+5am
(define-integration-test chang&lee-test-8
  (program '(x y z)
	   '((l 1 a)
	     (d x x)
	     (or (p x) (d (g x) x))
	     (or (p x) (l 1 (g x)))
	     (or (p x) (l (g x) x))
	     (or (~p x) (~d x a))		; negation of theorem
	     (or (~d x y) (~d y z) (d x z))
	     (or (~l 1 x) (~l x a) (p (f x)))
	     (or (~l 1 x) (~l x a) (d (f x) x))
	     (<- (query) (and (search (and (p x) (d x a))) !))))
  (query)
  (5am:is (= 1 *trail*))
  (5am:is (equal '(1 . a)
		 (aref *trail-array* 0))))

#+5am
(define-integration-test chang&lee-test-9
  (program '(x y)
	   '((l x (f x))
	     (~l x x)
	     (or (~l x y) (~l y x))
	     (or (~d x (f y)) (l y x))
	     (or (p x) (d (h x) x))
	     (or (p x) (p (h x)))
	     (or (p x) (l (h x) x))
	     (or (~p x) (~l a x) (l (f a) x))	; negation of theorem
	     (<- (query) (and (search (and (p x) (l a x) (~l (f a) x))) !))))
  (query)
  (5am:is (= 1 *trail*))
  (5am:is (equal '(1 f/1 (3 . a))
		 (aref *trail-array* 0))))
